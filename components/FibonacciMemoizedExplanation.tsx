import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const FibonacciMemoizedExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üß† Fibonacci com Memoiza√ß√£o</h2>

            <SectionTitle>Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">
                O problema de Fibonacci cl√°ssico, definido por F(n) = F(n-1) + F(n-2) com F(0)=0 e F(1)=1, tem uma solu√ß√£o recursiva ing√™nua que √© exponencial devido √† recomputa√ß√£o de subproblemas. A <strong>memoiza√ß√£o</strong> armazena F(k) ap√≥s a primeira computa√ß√£o, reduzindo drasticamente o tempo para <strong>O(n)</strong>.
            </p>
            <SubTitle>V√≠nculo Conceitual</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Estado</strong>: Um √∫nico √≠ndice `n`, pois existem apenas `n+1` subproblemas (de 0 a n).</ListItem>
                <ListItem><strong>Cache</strong>: Um mapa (dicion√°rio) ou array para armazenar os resultados de `n ‚Üí F(n)`.</ListItem>
                <ListItem><strong>Complexidade</strong>: Tempo O(n), Espa√ßo O(n) para o cache e a pilha de recurs√£o.</ListItem>
            </ul>

            <SectionTitle>Implementa√ß√µes Essenciais</SectionTitle>
            <SubTitle>Usando um Dicion√°rio como Cache</SubTitle>
            <CodeBlock>{`cache = {0: 0, 1: 1}
def fib_memo(n):
    if n in cache:
        return cache[n]
    
    cache[n] = fib_memo(n-1) + fib_memo(n-2)
    return cache[n]`}</CodeBlock>

            <SubTitle>Usando Decorador (Python)</SubTitle>
            <CodeBlock>{`from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n):
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)`}</CodeBlock>

            <SectionTitle>An√°lise de Especialista</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Por que O(2‚Åø) vira O(n)?</strong> Cada valor F(k) √© calculado no m√°ximo uma vez. Todas as chamadas subsequentes para F(k) s√£o respondidas em tempo O(1) a partir do cache.</ListItem>
                <ListItem><strong>√Årvore de Recorr√™ncia</strong>: A √°rvore de recurs√£o bin√°ria e cheia da solu√ß√£o ing√™nua "colapsa" em um Grafo Ac√≠clico Dirigido (DAG) quase linear, pois os n√≥s duplicados s√£o fundidos.</ListItem>
                <ListItem><strong>Valida√ß√£o</strong>: A memoiza√ß√£o produz resultados id√™nticos aos da abordagem iterativa (tabula√ß√£o), mas com o custo adicional da pilha de chamadas recursivas.</ListItem>
            </ul>
        </div>
    );
};

export default FibonacciMemoizedExplanation;