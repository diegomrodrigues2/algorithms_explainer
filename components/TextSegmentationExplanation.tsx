import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const TextSegmentationExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üìù Segmenta√ß√£o de Texto</h2>

            <SectionTitle>Vis√£o Geral do Problema</SectionTitle>
            <p className="text-slate-300">O problema de Segmenta√ß√£o de Texto (ou "Word Break") √© um problema cl√°ssico de processamento de linguagem que se encaixa perfeitamente no paradigma de backtracking. O objetivo √© determinar se uma string sem espa√ßos pode ser dividida em uma sequ√™ncia de palavras v√°lidas de um dicion√°rio.</p>
            <SubTitle>Defini√ß√£o Formal</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Entrada:</strong> Uma string `S` e um dicion√°rio de palavras v√°lidas.</li>
                <li><strong>Sa√≠da:</strong> Uma segmenta√ß√£o v√°lida de `S` (ex: `["hello", "world"]`) ou `None` se for imposs√≠vel.</li>
            </ul>

            <SectionTitle>üîÑ Estrat√©gia de Backtracking</SectionTitle>
            <p className="text-slate-300">O algoritmo explora a string da esquerda para a direita, tentando encontrar prefixos que correspondam a palavras no dicion√°rio. Para cada prefixo v√°lido encontrado, ele faz uma chamada recursiva para tentar segmentar o restante da string.</p>
            <CodeBlock>{`def segment(text, dictionary):
    # Caso base: string vazia √© uma segmenta√ß√£o v√°lida
    if not text:
        return []
    
    # Tenta todos os prefixos
    for i in range(1, len(text) + 1):
        prefix = text[:i]
        
        if prefix in dictionary:
            # Encontrou um prefixo v√°lido, tenta segmentar o resto
            suffix_segmentation = segment(text[i:], dictionary)
            
            # Se o resto p√¥de ser segmentado, a solu√ß√£o est√° completa
            if suffix_segmentation is not None:
                return [prefix] + suffix_segmentation
    
    # Nenhum prefixo levou a uma solu√ß√£o, retorna falha
    return None`}</CodeBlock>

            <SectionTitle>‚ö° Otimiza√ß√£o com Memoiza√ß√£o</SectionTitle>
            <p className="text-slate-300">A abordagem de backtracking pura tem uma complexidade de O(2‚Åø) devido √† recomputa√ß√£o massiva de subproblemas sobrepostos. A memoiza√ß√£o (ou programa√ß√£o din√¢mica) √© crucial aqui, armazenando os resultados para subproblemas j√° resolvidos. Isso reduz a complexidade para O(n¬≤).</p>
            <CodeBlock>{`memo = {}
def segment_memo(text, dictionary):
    if text in memo: return memo[text]
    # ... mesma l√≥gica de antes ...
    memo[text] = result
    return result`}</CodeBlock>

            <SectionTitle>üìà An√°lise de Complexidade (Com Memoiza√ß√£o)</SectionTitle>
             <Table
                headers={["Aspecto", "Complexidade", "Justificativa"]}
                rows={[
                    ["Tempo", "O(n¬≤)", "Existem `n` subproblemas (sufixos). Para cada um, o loop pode iterar `n` vezes, e o fatiamento da string leva O(n)."],
                    ["Espa√ßo", "O(n¬≤)", "O(n) para a pilha de recurs√£o e O(n¬≤) para armazenar os resultados na memoiza√ß√£o no pior caso."],
                ]}
            />
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Processamento de Linguagem Natural:</strong> Essencial para linguagens sem espa√ßos como Chin√™s, Japon√™s e Tailand√™s.</li>
                <li><strong>Corre√ß√£o Autom√°tica:</strong> Sugerir corre√ß√µes para palavras concatenadas (ex: "showdebola" -> "show de bola").</li>
                <li><strong>An√°lise de URL:</strong> Extrair palavras-chave de slugs de URL (ex: `/artigo/como-usar-backtracking`).</li>
                <li><strong>Bioinform√°tica:</strong> Identificar genes ou padr√µes em sequ√™ncias de DNA.</li>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">A Segmenta√ß√£o de Texto √© um exemplo fant√°stico que demonstra a necessidade de otimiza√ß√£o em algoritmos recursivos. Enquanto o backtracking fornece uma estrutura l√≥gica e elegante, √© a adi√ß√£o da memoiza√ß√£o que o torna uma ferramenta pr√°tica e eficiente para resolver este problema do mundo real.</p>
        </div>
    );
};

export default TextSegmentationExplanation;