import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem } from './ExplanationUI';

const GraphColoringExplanation = () => {
    const pythonAlgorithm = `def graph_coloring_backtracking(graph, m):
    V = len(graph)
    colors = [0] * V
    
    def is_safe(vertex, color):
        # Verifica se √© seguro atribuir a cor ao v√©rtice
        for i in range(V):
            if graph[vertex][i] == 1 and colors[i] == color:
                return False
        return True
    
    def graph_coloring_util(vertex):
        # Caso base: todos os v√©rtices foram coloridos
        if vertex == V:
            return True
        
        # Tenta cada cor dispon√≠vel para o v√©rtice atual
        for color in range(1, m + 1):
            if is_safe(vertex, color):
                colors[vertex] = color
                
                # Recurs√£o para o pr√≥ximo v√©rtice
                if graph_coloring_util(vertex + 1):
                    return True
                
                # Backtrack: remove a cor se n√£o levou √† solu√ß√£o
                colors[vertex] = 0
        
        # Nenhuma cor funcionou para este v√©rtice
        return False
    
    return colors if graph_coloring_util(0) else None`;

    const pythonDegreeSort = `degrees = [sum(graph[i]) for i in range(V)]
vertex_order = sorted(range(V), key=lambda x: degrees[x], reverse=True)`;

    const pythonIsSafe = `def is_safe(vertex, color):
    for i in range(V):
        if graph[vertex][i] == 1 and colors[i] == color:
            return False
    return True`;
    
    const pythonMemo = `def get_state_key(vertex):
    return f"{vertex}:{tuple(colors[:vertex])}"

memo = {}
def graph_coloring_memoized(vertex):
    state_key = get_state_key(vertex)
    if state_key in memo:
        return memo[state_key]
    # ... resto do algoritmo`;
    
    const welshPowell = `def welsh_powell_coloring(graph):
    # Ordena v√©rtices por grau decrescente
    vertices = sorted(range(V), key=lambda x: degrees[x], reverse=True)
    colors = [0] * V
    
    for vertex in vertices:
        # Encontra a menor cor dispon√≠vel
        used_colors = set(colors[adj] for adj in range(V) 
                         if graph[vertex][adj] == 1 and colors[adj] > 0)
        color = 1
        while color in used_colors:
            color += 1
        colors[vertex] = color
    
    return colors`;

    const countSolutions = `def graph_coloring_count_solutions(graph, m):
    V = len(graph)
    colors = [0] * V
    solution_count = [0]
    
    def count_solutions_util(vertex):
        if vertex == V:
            solution_count[0] += 1
            return
        
        for color in range(1, m + 1):
            if is_safe(vertex, color):
                colors[vertex] = color
                count_solutions_util(vertex + 1)
                colors[vertex] = 0
    
    count_solutions_util(0)
    return solution_count[0]`;

    const allSolutions = `def graph_coloring_all_solutions(graph, m):
    V = len(graph)
    colors = [0] * V
    solutions = []
    
    def find_all_solutions_util(vertex):
        if vertex == V:
            solutions.append(colors.copy())
            return
        
        for color in range(1, m + 1):
            if is_safe(vertex, color):
                colors[vertex] = color
                find_all_solutions_util(vertex + 1)
                colors[vertex] = 0
    
    find_all_solutions_util(0)
    return solutions`;

    const analyzeComplexity = `def analyze_graph_coloring_complexity(graph, m):
    V = len(graph)
    E = sum(sum(row) for row in graph) // 2
    degrees = [sum(graph[i]) for i in range(V)]
    max_degree = max(degrees) if degrees else 0
    avg_degree = sum(degrees) / V if V > 0 else 0
    
    return {
        "vertices": V,
        "edges": E,
        "colors": m,
        "max_degree": max_degree,
        "avg_degree": avg_degree,
        "worst_case_time": m ** V,
        "best_case_time": V * m,
        "chromatic_number_upper_bound": max_degree + 1,
        "chromatic_number_lower_bound": max(1, V // (V - max_degree)) if max_degree < V else 1
    }`;
    
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üé® Colora√ß√£o de Grafos</h2>

            <SectionTitle>Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">
                O problema de <strong>Colora√ß√£o de Grafos</strong> √© um problema NP-completo cl√°ssico que envolve atribuir cores aos v√©rtices de um grafo de forma que v√©rtices adjacentes tenham cores diferentes. √â uma aplica√ß√£o direta do backtracking para resolver problemas de satisfa√ß√£o de restri√ß√µes em grafos.
            </p>
            <SubTitle>Defini√ß√£o Formal</SubTitle>
            <ul className="list-disc list-inside space-y-2 mt-2 text-slate-300">
                <ListItem><strong>Entrada:</strong> Um grafo <code>G = (V, E)</code> representado por matriz de adjac√™ncia e um inteiro <code>m</code> (n√∫mero m√°ximo de cores dispon√≠veis).</ListItem>
                <ListItem><strong>Sa√≠da:</strong> Uma colora√ß√£o v√°lida <code>c: V ‚Üí {`{1, 2, ..., m}`}</code> tal que <code>c(u) ‚â† c(v)</code> para toda aresta <code>(u, v) ‚àà E</code>, ou <code>None</code> se n√£o for poss√≠vel colorir com <code>m</code> cores.</ListItem>
            </ul>
            
            <SectionTitle>Estrat√©gia do Algoritmo de Backtracking</SectionTitle>
            <SubTitle>√Årvore de Decis√£o por V√©rtice</SubTitle>
            <p className="text-slate-300">Para cada v√©rtice <code>v·µ¢</code>, a recurs√£o tenta atribuir uma cor de 1 a m:</p>
            <CodeBlock>{`                    v‚ÇÄ?
                   / | \\
                  /  |  \\
                 /   |   \\
               Cor1 Cor2 Cor3
               /     |     \\
            v‚ÇÅ?    v‚ÇÅ?    v‚ÇÅ?
           / | \\  / | \\  / | \\
          /  |  \\/  |  \\/  |  \\
       Cor1 Cor2 Cor3 Cor1 Cor2 Cor3
       / | \\ / | \\ / | \\ / | \\ / | \\ / | \\
      ... ... ... ... ... ... ... ... ... ...`}</CodeBlock>

            <SubTitle>Algoritmo Recursivo</SubTitle>
            <CodeBlock>{pythonAlgorithm}</CodeBlock>

            <SectionTitle>An√°lise de Complexidade</SectionTitle>
            <SubTitle>Complexidade de Tempo</SubTitle>
            <ul className="list-disc list-inside space-y-2 mt-2 text-slate-300">
                <ListItem><strong>Pior caso:</strong> O(m^V) - tenta m cores para cada v√©rtice</ListItem>
                <ListItem><strong>Melhor caso:</strong> O(V √ó m) - quando cada v√©rtice pode ser colorido na primeira tentativa</ListItem>
                <ListItem><strong>Caso m√©dio:</strong> Depende da estrutura do grafo e do n√∫mero de cores</ListItem>
            </ul>
            <SubTitle>Complexidade de Espa√ßo</SubTitle>
            <ul className="list-disc list-inside space-y-2 mt-2 text-slate-300">
                <ListItem><strong>Recurs√£o:</strong> O(V) - profundidade da pilha de recurs√£o</ListItem>
                <ListItem><strong>Memoiza√ß√£o:</strong> O(V √ó m^V) - tabela de memoiza√ß√£o</ListItem>
            </ul>
            <SubTitle>Rela√ß√£o de Recorr√™ncia</SubTitle>
            <CodeBlock>{`T(V) = m √ó T(V-1) + O(V)

A solu√ß√£o √©:

T(V) = O(m^V)`}</CodeBlock>

            <SectionTitle>Otimiza√ß√µes Implementadas</SectionTitle>
            <SubTitle>1. Ordena√ß√£o por Grau</SubTitle>
            <CodeBlock>{pythonDegreeSort}</CodeBlock>
            <p className="text-slate-300"><strong>Vantagens:</strong> Colore v√©rtices de maior grau primeiro, reduz o n√∫mero de backtrackings necess√°rios, e aproveita restri√ß√µes mais restritivas cedo.</p>
            <SubTitle>2. Verifica√ß√£o Eficiente</SubTitle>
            <CodeBlock>{pythonIsSafe}</CodeBlock>
            <p className="text-slate-300"><strong>Caracter√≠sticas:</strong> Verifica apenas v√©rtices adjacentes, termina√ß√£o antecipada quando poss√≠vel, O(V) no pior caso, mas O(1) em m√©dia.</p>
            <SubTitle>3. Memoiza√ß√£o</SubTitle>
            <CodeBlock>{pythonMemo}</CodeBlock>
            <p className="text-slate-300"><strong>Benef√≠cios:</strong> Evita rec√°lculos de estados j√° visitados, melhora performance para grafos com padr√µes repetitivos, trade-off entre tempo e espa√ßo.</p>

            <SectionTitle>Aplica√ß√µes Pr√°ticas</SectionTitle>
            <SubTitle>1. Colora√ß√£o de Mapas</SubTitle>
            <p className="text-slate-300">Colorir pa√≠ses/estados vizinhos com cores diferentes. O Teorema das Quatro Cores afirma que qualquer mapa planar pode ser colorido com 4 cores.</p>
            <SubTitle>2. Agendamento de Exames</SubTitle>
            <p className="text-slate-300">Cada exame √© um v√©rtice; estudantes em comum criam arestas. Cores representam hor√°rios diferentes.</p>
            <SubTitle>3. Aloca√ß√£o de Registradores</SubTitle>
            <p className="text-slate-300">Vari√°veis s√£o v√©rtices; uso simult√¢neo cria arestas. Cores representam registradores diferentes.</p>
            <SubTitle>4. Problema do Sudoku</SubTitle>
            <p className="text-slate-300">Cada c√©lula √© um v√©rtice; c√©lulas na mesma linha/coluna/bloco s√£o adjacentes. Cores representam n√∫meros de 1 a 9.</p>
            <SubTitle>5. Design de Redes</SubTitle>
            <p className="text-slate-300">Canais s√£o v√©rtices; interfer√™ncia cria arestas. Cores representam frequ√™ncias diferentes.</p>

            <SectionTitle>Insights Te√≥ricos</SectionTitle>
            <SubTitle>N√∫mero Crom√°tico</SubTitle>
            <p className="text-slate-300">O <strong>n√∫mero crom√°tico</strong> œá(G) de um grafo G √© o menor n√∫mero de cores necess√°rias para colorir G.</p>

            <SubTitle>Heur√≠sticas de Colora√ß√£o</SubTitle>
            <p className="text-slate-300"><strong>1. Welsh-Powell</strong></p>
            <CodeBlock>{welshPowell}</CodeBlock>
            <p className="text-slate-300"><strong>2. DSatur (Degree of Saturation)</strong></p>
            <p className="text-slate-300">Considera o n√∫mero de cores diferentes usadas pelos vizinhos e escolhe v√©rtices com maior satura√ß√£o.</p>

            <SectionTitle>Varia√ß√µes do Problema</SectionTitle>
            <SubTitle>1. Colora√ß√£o de Arestas</SubTitle>
            <SubTitle>2. Colora√ß√£o Lista</SubTitle>
            <SubTitle>3. Colora√ß√£o Total</SubTitle>
            
            <SectionTitle>Implementa√ß√µes Espec√≠ficas</SectionTitle>
            <SubTitle>Contagem de Solu√ß√µes</SubTitle>
            <CodeBlock>{countSolutions}</CodeBlock>
            <SubTitle>Todas as Solu√ß√µes</SubTitle>
            <CodeBlock>{allSolutions}</CodeBlock>
            <SubTitle>An√°lise de Complexidade</SubTitle>
            <CodeBlock>{analyzeComplexity}</CodeBlock>

            <SectionTitle>Conex√£o com CSP</SectionTitle>
            <p className="text-slate-300">O problema de colora√ß√£o de grafos √© um <strong>Problema de Satisfa√ß√£o de Restri√ß√µes (CSP)</strong>:</p>
            <ul className="list-disc list-inside space-y-2 mt-2 text-slate-300">
                <ListItem><strong>Vari√°veis:</strong> <code>c(v)</code> para cada v√©rtice v ‚àà V</ListItem>
                <ListItem><strong>Dom√≠nios:</strong> D(v) = {`{1, 2, ..., m}`} para cada v√©rtice v</ListItem>
                <ListItem><strong>Restri√ß√µes:</strong> <code>c(u) ‚â† c(v)</code> para toda aresta (u, v) ‚àà E</ListItem>
            </ul>
        </div>
    );
};
export default GraphColoringExplanation;
