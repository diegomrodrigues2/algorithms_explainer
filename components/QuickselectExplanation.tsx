import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const QuickselectExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üîç Quickselect</h2>
            
            <SectionTitle>Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">O Quickselect √© uma aplica√ß√£o brilhante da ideia de particionamento do Quicksort. Em vez de recurs√£o em ambos os lados do piv√¥, ele descarta um lado e continua a busca apenas na parti√ß√£o que deve conter o k-√©simo elemento. Isso reduz a complexidade m√©dia de O(n log n) para O(n), tornando-o um dos algoritmos de sele√ß√£o mais eficientes na pr√°tica.</p>

            <SectionTitle>Conceitos Fundamentais</SectionTitle>
            <SubTitle>Problema de Sele√ß√£o</SubTitle>
            <p className="text-slate-300">O problema de sele√ß√£o consiste em encontrar o k-√©simo menor elemento em um array n√£o ordenado. Este √© um problema fundamental em ci√™ncia da computa√ß√£o, com aplica√ß√µes em:</p>
            <ul className="list-disc list-inside space-y-2 mt-2 text-slate-400">
                <li><strong>Estat√≠stica:</strong> C√°lculo de medianas, quartis, percentis</li>
                <li><strong>Machine Learning:</strong> Sele√ß√£o de features, outliers</li>
                <li><strong>Sistemas de Banco de Dados:</strong> Otimiza√ß√£o de consultas</li>
                <li><strong>Algoritmos de Ordena√ß√£o:</strong> Como subrotina em outros algoritmos</li>
            </ul>

            <SubTitle>Estrat√©gia de Divis√£o e Conquista</SubTitle>
            <p className="text-slate-300">O Quickselect segue o paradigma de divis√£o e conquista, mas com uma otimiza√ß√£o crucial:</p>
            <ol className="list-decimal list-inside space-y-2 text-slate-300 mt-2">
                <li><strong>Dividir:</strong> Particionar o array usando um piv√¥</li>
                <li><strong>Conquistar:</strong> Recurs√£o apenas no lado relevante</li>
                <li><strong>Combinar:</strong> N√£o h√° combina√ß√£o - o elemento √© encontrado diretamente</li>
            </ol>

            <SectionTitle>Algoritmo B√°sico</SectionTitle>
            <SubTitle>Pseudoc√≥digo</SubTitle>
            <CodeBlock>{`function quickselect(array, k):
    if length(array) == 1:
        return array[0]
    
    pivot = partition(array)
    pivot_rank = pivot + 1
    
    if k == pivot_rank:
        return array[pivot]
    elif k < pivot_rank:
        return quickselect(left_partition, k)
    else:
        return quickselect(right_partition, k - pivot_rank)`}</CodeBlock>

            <SectionTitle>An√°lise de Complexidade</SectionTitle>
             <Table 
                headers={["Aspecto", "Quicksort", "Quickselect"]}
                rows={[
                    [<strong>Recorr√™ncia</strong>, <code>T(n) = 2T(n/2) + O(n)</code>, <code>T(n) = T(n/2) + O(n)</code>],
                    [<strong>Complexidade</strong>, <code>O(n log n)</code>, <code>O(n)</code>],
                    [<strong>Recurs√£o</strong>, "Ambos os lados", "Apenas um lado"],
                    [<strong>Objetivo</strong>, "Ordenar todo o array", "Encontrar um elemento"]
                ]}
            />
            
            <SectionTitle>An√°lise de Performance</SectionTitle>
            <SubTitle>Casos de Uso</SubTitle>
             <Table 
                headers={["Cen√°rio", "Performance", "Explica√ß√£o"]}
                rows={[
                    ["Piv√¥ sempre mediano", <code>O(n)</code>, "Redu√ß√£o ideal do problema"],
                    ["Piv√¥ sempre extremo", <code>O(n¬≤)</code>, "Pior caso poss√≠vel"],
                    ["Piv√¥ aleat√≥rio", <code>O(n) esperado</code>, "Probabilisticamente linear"],
                    ["Array j√° ordenado", <code>O(n¬≤)</code>, "Sem otimiza√ß√£o de piv√¥"]
                ]}
            />
            <SubTitle>Compara√ß√£o com Outros Algoritmos</SubTitle>
            <Table
                headers={["Algoritmo", "Tempo M√©dio", "Tempo Pior Caso", "Espa√ßo", "Est√°vel"]}
                rows={[
                    [<strong>Quickselect</strong>, <code>O(n)</code>, <code>O(n¬≤)</code>, <code>O(log n)</code>, "N√£o"],
                    ["Heap Select", <code>O(n + k log n)</code>, <code>O(n + k log n)</code>, <code>O(1)</code>, "N√£o"],
                    ["Sort + Select", <code>O(n log n)</code>, <code>O(n log n)</code>, <code>O(n)</code>, "Sim"],
                    ["BFPRT", <code>O(n)</code>, <code>O(n)</code>, <code>O(n)</code>, "N√£o"]
                ]}
            />
            <SectionTitle>Conclus√£o</SectionTitle>
            <p className="text-slate-300">O Quickselect representa uma aplica√ß√£o elegante e eficiente do paradigma de divis√£o e conquista. Sua capacidade de encontrar o k-√©simo elemento em tempo linear m√©dio o torna indispens√°vel em muitas aplica√ß√µes pr√°ticas, desde c√°lculos estat√≠sticos at√© otimiza√ß√µes de sistemas de banco de dados.</p>
            <p className="text-slate-400 mt-2">A chave para sua efici√™ncia est√° na redu√ß√£o do problema: em vez de processar ambos os lados do piv√¥, o algoritmo descarta metade do array a cada itera√ß√£o, resultando em uma complexidade linear m√©dia que √© dif√≠cil de superar com algoritmos baseados em compara√ß√£o.</p>
        </div>
    );
};

export default QuickselectExplanation;