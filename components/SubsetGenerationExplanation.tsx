import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const SubsetGenerationExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üìö Gera√ß√£o de Subconjuntos</h2>

            <SectionTitle>Vis√£o Geral do Problema</SectionTitle>
            <p className="text-slate-300">O problema de Gera√ß√£o de Subconjuntos (tamb√©m conhecido como "Power Set") √© um problema fundamental de enumera√ß√£o combinat√≥ria. O objetivo √© listar todos os subconjuntos poss√≠veis de um conjunto dado. Este problema demonstra a estrutura de decis√£o bin√°ria (incluir/excluir) que √© central para muitos algoritmos de backtracking.</p>
            <SubTitle>Defini√ß√£o Formal</SubTitle>
            <p className="text-slate-300">Dado um conjunto S = {'{s‚ÇÅ, s‚ÇÇ, ..., s‚Çô}'}, o conjunto das partes P(S) √© o conjunto de todos os subconjuntos de S, incluindo o conjunto vazio e o pr√≥prio conjunto S.</p>
            <SubTitle>Propriedades</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Cardinalidade</strong>: Para um conjunto de `n` elementos, existem `2‚Åø` subconjuntos poss√≠veis.</li>
                <li><strong>Estrutura de Decis√£o</strong>: Para cada elemento, existem duas escolhas: ou ele est√° no subconjunto, ou n√£o est√°.</li>
            </ul>

            <SectionTitle>üîÑ Estrat√©gia de Backtracking</SectionTitle>
            <p className="text-slate-300">O algoritmo constr√≥i uma √°rvore de decis√£o bin√°ria. Em cada n√≠vel da √°rvore, ele decide se deve incluir ou excluir o elemento correspondente daquele n√≠vel no subconjunto que est√° sendo formado. A explora√ß√£o completa dessa √°rvore gera todos os subconjuntos poss√≠veis.</p>
            <CodeBlock>{`def generate_subsets(elements):
    result = []
    
    def backtrack(index, current_subset):
        # Adiciona o estado atual como um subconjunto v√°lido
        result.append(list(current_subset))
        
        # Explora as pr√≥ximas decis√µes
        for i in range(index, len(elements)):
            # Incluir o elemento
            current_subset.append(elements[i])
            backtrack(i + 1, current_subset)
            
            # Excluir o elemento (backtrack)
            current_subset.pop()
    
    backtrack(0, [])
    return result`}</CodeBlock>

            <SectionTitle>üìä An√°lise de Complexidade</SectionTitle>
             <Table
                headers={["Aspecto", "Complexidade", "Justificativa"]}
                rows={[
                    [<strong>Tempo</strong>, "O(n √ó 2‚Åø)", "Existem `2‚Åø` subconjuntos e, para cada um, pode levar at√© O(n) para criar uma c√≥pia dele. A abordagem bitmask tem a mesma complexidade."],
                    [<strong>Espa√ßo</strong>, "O(n √ó 2‚Åø)", "O(n) para a pilha de recurs√£o, mas o armazenamento de todos os `2‚Åø` subconjuntos, cada um com tamanho m√©dio de n/2, domina o espa√ßo."],
                ]}
            />
            
            <SectionTitle>‚öîÔ∏è Backtracking vs. Bitmask</SectionTitle>
            <p className="text-slate-300">Uma abordagem alternativa popular √© o uso de "bitmasking". Cada n√∫mero inteiro de 0 a 2‚Åø-1 pode representar um subconjunto. Se o j-√©simo bit do n√∫mero `i` est√° ligado, o j-√©simo elemento do conjunto original √© inclu√≠do no subconjunto.</p>
            <CodeBlock>{`// Exemplo para n=3, elements=[a,b,c]
// i=0 (000) -> {}
// i=1 (001) -> {c}
// i=2 (010) -> {b}
// i=3 (011) -> {b,c}
// ...
// i=7 (111) -> {a,b,c}`}</CodeBlock>

            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Base para outros problemas</strong>: Serve como base para resolver problemas como Soma de Subconjuntos, Problema da Mochila e outros que envolvem selecionar um subconjunto de itens.</ListItem>
                <ListItem><strong>Modelagem de Caracter√≠sticas</strong>: Em machine learning, para testar todas as combina√ß√µes poss√≠veis de um conjunto de caracter√≠sticas.</ListItem>
                <ListItem><strong>Gera√ß√£o de Casos de Teste</strong>: Para gerar todas as configura√ß√µes poss√≠veis de um sistema para testes exaustivos.</ListItem>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">A Gera√ß√£o de Subconjuntos √© o "Hello, World!" dos problemas de enumera√ß√£o por backtracking. Sua estrutura simples, mas poderosa, de decis√µes bin√°rias recursivas √© um padr√£o que aparece em in√∫meros problemas combinat√≥rios mais complexos. Dominar este conceito √© um passo fundamental para resolver uma vasta gama de desafios algor√≠tmicos.</p>
        </div>
    );
};

export default SubsetGenerationExplanation;