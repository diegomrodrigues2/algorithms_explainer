import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const OBSTExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üå≥ √Årvore de Busca √ìtima (OBST)</h2>

            <SectionTitle>Vis√£o Geral do Problema</SectionTitle>
            <p className="text-slate-300">O problema da √Årvore de Busca Bin√°ria √ìtima (OBST) consiste em construir uma √°rvore de busca bin√°ria que minimize o custo total de todas as buscas, dado um array ordenado de chaves e suas frequ√™ncias de busca.</p>
            <SubTitle>Defini√ß√£o Formal</SubTitle>
            <p className="text-slate-300">Dado um array ordenado de chaves `keys[0..n-1]` e um array de frequ√™ncias `freq[0..n-1]`, onde `freq[i]` √© o n√∫mero de buscas pela chave `keys[i]`, o objetivo √© construir uma √°rvore de busca bin√°ria que minimize o custo total de todas as buscas. O custo de um n√≥ √© seu n√≠vel (profundidade) na √°rvore multiplicado por sua frequ√™ncia.</p>

            <SectionTitle>Estrat√©gia de Backtracking</SectionTitle>
            <p className="text-slate-300">Para cada intervalo de chaves `[i..k]`, a recurs√£o testa todas as chaves poss√≠veis `r` nesse intervalo como a raiz da sub√°rvore. O custo total para essa escolha √© a soma das frequ√™ncias no intervalo, mais o custo √≥timo das sub√°rvores esquerda e direita.</p>
            <CodeBlock>{`Custo(i, k) = ( Œ£ freq[j] de i a k ) + min over r in [i..k] { Custo(i, r-1) + Custo(r+1, k) }`}</CodeBlock>

            <SectionTitle>‚ö° Otimiza√ß√£o com Memoiza√ß√£o</SectionTitle>
            <p className="text-slate-300">A abordagem de backtracking pura √© exponencialmente lenta porque resolve os mesmos subproblemas repetidamente. A memoiza√ß√£o armazena os resultados dos subproblemas j√° calculados (o custo √≥timo para um intervalo `[i, j]`) em uma tabela, evitando o rec√°lculo e reduzindo drasticamente a complexidade.</p>

            <SectionTitle>üìä An√°lise de Complexidade</SectionTitle>
            <Table
                headers={["Abordagem", "Tempo", "Espa√ßo", "Justificativa"]}
                rows={[
                    ["Backtracking Puro", "O(n √ó 2‚Åø)", "O(n)", "Explora todas as poss√≠veis √°rvores, resultando em uma complexidade exponencial, similar aos n√∫meros de Catalan."],
                    [<strong>Com Memoiza√ß√£o (DP)</strong>, "O(n¬≥)", "O(n¬≤)", "Existem O(n¬≤) subproblemas. Cada um leva O(n) para ser resolvido (iterando sobre as poss√≠veis ra√≠zes). O espa√ßo √© para a tabela de memoiza√ß√£o."],
                ]}
            />
            <p className="text-slate-400 mt-2">√â poss√≠vel otimizar a solu√ß√£o de programa√ß√£o din√¢mica para O(n¬≤) usando a propriedade de monotonicidade de Knuth-Yao, mas a vers√£o O(n¬≥) √© mais direta de implementar e entender.</p>
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Compiladores:</strong> Otimiza√ß√£o de tabelas de s√≠mbolos para an√°lise l√©xica e sint√°tica.</ListItem>
                <ListItem><strong>Sistemas de Banco de Dados:</strong> Constru√ß√£o de estruturas de √≠ndice otimizadas.</ListItem>
                <ListItem><strong>Processamento de Linguagem Natural:</strong> Cria√ß√£o de dicion√°rios eficientes para verifica√ß√£o ortogr√°fica ou autocompletar.</ListItem>
                <ListItem><strong>Compress√£o de Dados:</strong> Pode ser relacionado a problemas de codifica√ß√£o √≥tima.</ListItem>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">O problema OBST √© um exemplo perfeito de como um problema com uma estrutura recursiva natural pode ser resolvido de forma ineficiente com backtracking puro, mas se torna trat√°vel com a adi√ß√£o de memoiza√ß√£o. Ele serve como uma porta de entrada para a programa√ß√£o din√¢mica, mostrando o poder de armazenar e reutilizar solu√ß√µes de subproblemas sobrepostos.</p>
        </div>
    );
};

export default OBSTExplanation;