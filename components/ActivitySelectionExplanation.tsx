import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem } from './ExplanationUI';

const ActivitySelectionExplanation = () => {
    const pythonImplementation = `def activity_selection(activities):
    # 1. Ordenar atividades pelo tempo de t√©rmino
    sorted_activities = sorted(activities, key=lambda x: x[1])
    
    selected = []
    
    # A primeira atividade que termina mais cedo √© sempre escolhida
    # Inicia com um tempo de t√©rmino que n√£o conflita com nenhuma atividade
    last_finish_time = -float('inf') 
    
    # 2. Iterar sobre as atividades ordenadas
    for start, finish in sorted_activities:
        # Se a atividade atual come√ßa ap√≥s ou no mesmo instante do t√©rmino da √∫ltima selecionada
        if start >= last_finish_time:
            selected.append((start, finish))
            last_finish_time = finish
            
    return selected`;

    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">‚è±Ô∏è Escalonamento de Atividades</h2>
            
            <SectionTitle>üéØ O Problema</SectionTitle>
            <p className="text-slate-300">Dado um conjunto de atividades, cada uma com um hor√°rio de in√≠cio e t√©rmino, o objetivo √© selecionar o maior n√∫mero poss√≠vel de atividades que n√£o se sobreponham. √â um problema cl√°ssico de otimiza√ß√£o.</p>

            <SectionTitle>üß† Estrat√©gia Gulosa</SectionTitle>
            <SubTitle>A Escolha Gulosa</SubTitle>
            <p className="text-slate-300">A estrat√©gia vencedora √© surpreendentemente simples: <strong className="text-cyan-400">sempre escolher a pr√≥xima atividade compat√≠vel que termina mais cedo</strong>. Por que isso funciona?</p>
            <ul className="list-disc list-inside space-y-2 text-slate-300 mt-2">
                <li>Ao escolher a atividade que termina o mais r√°pido poss√≠vel, liberamos o recurso (ex: sala de aula, projetor) mais cedo.</li>
                <li>Isso maximiza o tempo restante dispon√≠vel para outras atividades, aumentando as chances de encaixar mais eventos.</li>
            </ul>

            <SubTitle>Prova de Corre√ß√£o (Intui√ß√£o)</SubTitle>
             <p className="text-slate-300">A corre√ß√£o pode ser provada pelo m√©todo "greedy stays ahead". A ideia √© que, a cada passo, a escolha gulosa √© t√£o boa ou melhor que qualquer outra escolha poss√≠vel em uma solu√ß√£o √≥tima. Se uma solu√ß√£o √≥tima n√£o escolhe a atividade que termina mais cedo, podemos sempre troc√°-la por essa atividade sem piorar a solu√ß√£o, mostrando que a escolha gulosa √© sempre segura.</p>

            <SectionTitle>üîß Algoritmo</SectionTitle>
            <CodeBlock>{pythonImplementation}</CodeBlock>

            <SectionTitle>üìä An√°lise de Complexidade</SectionTitle>
            <ul className="text-slate-300 space-y-3">
                <ListItem><strong>Tempo:</strong> <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(n log n)</code> - Dominado pela etapa de ordena√ß√£o das atividades por tempo de t√©rmino.</ListItem>
                <ListItem><strong>Espa√ßo:</strong> <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(n)</code> - Para armazenar as atividades ordenadas e a solu√ß√£o.</ListItem>
            </ul>
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
             <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li>Agendamento de salas de reuni√£o ou aulas.</li>
                <li>Aloca√ß√£o de recursos em sistemas operacionais.</li>
                <li>Otimiza√ß√£o de rotas em redes de comunica√ß√£o.</li>
            </ul>
        </div>
    );
};

export default ActivitySelectionExplanation;
