import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const SubsetSumExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üí∞ Soma de Subconjuntos</h2>

            <SectionTitle>Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">O problema <strong>Subset Sum</strong> √© um problema NP-completo cl√°ssico que consiste em determinar se existe um subconjunto de um conjunto de inteiros positivos cuja soma seja igual a um valor alvo espec√≠fico.</p>
            <SubTitle>Defini√ß√£o Formal</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Entrada:</strong> Um conjunto de inteiros `X` e um alvo `T`.</li>
                <li><strong>Sa√≠da:</strong> `True` se existe um subconjunto `S ‚äÜ X` cuja soma √© `T`, e `False` caso contr√°rio.</li>
            </ul>

            <SectionTitle>üîÑ Estrat√©gia de Backtracking</SectionTitle>
            <p className="text-slate-300">Para cada elemento, o algoritmo decide recursivamente se deve inclu√≠-lo ou n√£o no subconjunto, construindo uma √°rvore de decis√£o bin√°ria. Se um caminho excede a soma alvo ou esgota os n√∫meros, ele retrocede (backtracks) para tentar uma decis√£o diferente.</p>
            <CodeBlock>{`def subset_sum_backtracking(numbers, target):
    def backtrack(index, current_sum, subset):
        if current_sum == target:
            return subset # Solu√ß√£o encontrada
        
        if current_sum > target or index >= len(numbers):
            return None # Caminho inv√°lido
        
        # Tenta incluir o elemento atual
        result = backtrack(index + 1, current_sum + numbers[index], subset + [numbers[index]])
        if result:
            return result
        
        # Backtrack: tenta sem o elemento atual
        return backtrack(index + 1, current_sum, subset)
    
    return backtrack(0, 0, [])`}</CodeBlock>

            <SectionTitle>‚ö° Otimiza√ß√µes (Podas)</SectionTitle>
             <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Ordena√ß√£o Decrescente:</strong> Ajuda a encontrar solu√ß√µes mais rapidamente e torna as podas mais eficazes.</ListItem>
                <ListItem><strong>Poda por Soma Restante:</strong> Se `soma_atual + soma_restante {'<'} alvo`, √© imposs√≠vel atingir o alvo. Este ramo da √°rvore √© "podado".</ListItem>
                 <ListItem><strong>Termina√ß√£o Antecipada:</strong> Se uma solu√ß√£o √© encontrada, a busca pode parar (a menos que todas as solu√ß√µes sejam necess√°rias).</ListItem>
            </ul>
            
            <SectionTitle>üìà An√°lise de Complexidade</SectionTitle>
            <p className="text-slate-300">A rela√ß√£o de recorr√™ncia √© <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">T(n) = 2T(n-1) + O(1)</code>, que resolve para uma complexidade de tempo de <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(2‚Åø)</code>, pois no pior caso explora todos os 2‚Åø subconjuntos. A complexidade de espa√ßo √© <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(n)</code> devido √† profundidade da pilha de recurs√£o.</p>

            <SectionTitle>‚öîÔ∏è Backtracking vs. Programa√ß√£o Din√¢mica</SectionTitle>
            <Table
                headers={["Aspecto", "Backtracking", "Programa√ß√£o Din√¢mica"]}
                rows={[
                    ["Complexidade", "O(2‚Åø)", "O(n √ó alvo)"],
                    ["Espa√ßo", "O(n)", "O(n √ó alvo)"],
                    ["Uso", "Bom para alvos grandes e/ou n pequeno", "Bom para alvos pequenos"],
                    ["Solu√ß√µes", "Encontra o subconjunto real", "Normalmente responde sim/n√£o"],
                ]}
            />
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Problema da Mochila:</strong> Uma varia√ß√£o famosa onde itens t√™m valores e pesos.</li>
                <li><strong>Aloca√ß√£o de Recursos:</strong> Distribuir um or√ßamento entre projetos para atingir um gasto exato.</li>
                <li><strong>Criptografia:</strong> Usado em alguns sistemas criptogr√°ficos baseados no problema da mochila.</li>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">Subset Sum √© um problema fundamental que ilustra perfeitamente a troca entre a simplicidade do backtracking e a efici√™ncia da programa√ß√£o din√¢mica. As t√©cnicas de poda s√£o cruciais para tornar a abordagem de backtracking vi√°vel na pr√°tica para inst√¢ncias de tamanho moderado.</p>
        </div>
    );
};

export default SubsetSumExplanation;