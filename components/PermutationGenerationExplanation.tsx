import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const PermutationGenerationExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üîÑ Gera√ß√£o de Permuta√ß√µes</h2>

            <SectionTitle>Vis√£o Geral do Problema</SectionTitle>
            <p className="text-slate-300">O problema de Gera√ß√£o de Permuta√ß√µes √© um desafio cl√°ssico de backtracking que consiste em enumerar todas as poss√≠veis ordena√ß√µes (arranjos) de elementos em um conjunto. √â um problema fundamental de enumera√ß√£o combinat√≥ria onde a cada passo recursivo, um elemento ainda n√£o utilizado √© escolhido para a posi√ß√£o atual.</p>
            <SubTitle>Exemplo</SubTitle>
             <p className="text-slate-300">Para a entrada `[A, B, C]`, existem `3! = 6` permuta√ß√µes:</p>
            <CodeBlock>{`[A,B,C], [A,C,B], [B,A,C], [B,C,A], [C,A,B], [C,B,A]`}</CodeBlock>
            
            <SectionTitle>üîÑ Estrat√©gia de Backtracking</SectionTitle>
            <p className="text-slate-300">A abordagem de backtracking visualizada aqui usa trocas no pr√≥prio local (in-place swap) para gerar permuta√ß√µes. √â uma t√©cnica eficiente em termos de mem√≥ria.</p>
             <ol className="list-decimal list-inside space-y-2 text-slate-300 mt-2">
                <li><strong>Fixar uma Posi√ß√£o:</strong> O algoritmo tenta preencher a permuta√ß√£o da esquerda para a direita (√≠ndice `start`).</li>
                <li><strong>Explorar Escolhas:</strong> Para a posi√ß√£o `start`, ele itera por todos os elementos de `start` at√© o final do array.</li>
                <li><strong>Trocar (Swap):</strong> Ele troca o elemento em `start` com o elemento atual da itera√ß√£o (`i`).</li>
                <li><strong>Recurs√£o:</strong> Faz uma chamada recursiva para a pr√≥xima posi√ß√£o (`start + 1`).</li>
                <li><strong>Retroceder (Backtrack):</strong> Ap√≥s o retorno da chamada recursiva, ele desfaz a troca para explorar outras possibilidades.</li>
            </ol>
            <SubTitle>Pseudoc√≥digo (In-place Swap)</SubTitle>
            <CodeBlock>{`def generate_permutations(elements, start):
    if start == len(elements):
        add_solution(elements)
        return
        
    for i in range(start, len(elements)):
        # Escolha: trocar elemento 'start' com 'i'
        swap(elements[start], elements[i])
        
        # Explorar
        generate_permutations(elements, start + 1)
        
        # Desfazer/Retroceder: trocar de volta
        swap(elements[start], elements[i])
`}</CodeBlock>

            <SectionTitle>üìä An√°lise de Complexidade</SectionTitle>
            <p className="text-slate-300">A complexidade √© dominada pelo n√∫mero de permuta√ß√µes, que √© n! (fatorial de n).</p>
            <Table
                headers={["Aspecto", "Complexidade", "Justificativa"]}
                rows={[
                    [<strong>Tempo</strong>, "O(n √ó n!)", "Existem `n!` permuta√ß√µes. Para cada uma, √© necess√°rio um tempo de O(n) para copiar a solu√ß√£o. A gera√ß√£o em si √© O(n!)."],
                    [<strong>Espa√ßo</strong>, "O(n √ó n!)", "O(n) para a profundidade da pilha de recurs√£o. O armazenamento de todas as `n!` permuta√ß√µes, cada uma com `n` elementos, domina o espa√ßo."],
                ]}
            />
            <p className="text-slate-400 mt-2">Devido √† complexidade fatorial, a gera√ß√£o de permuta√ß√µes √© impratic√°vel para valores de `n` maiores que 10-12.</p>
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Problema do Caixeiro Viajante:</strong> Uma abordagem de for√ßa bruta envolve testar todas as permuta√ß√µes de cidades.</ListItem>
                <ListItem><strong>Criptografia:</strong> An√°lise de cifras de transposi√ß√£o e outros algoritmos baseados em permuta√ß√µes.</ListItem>
                <ListItem><strong>Agendamento:</strong> Encontrar todas as poss√≠veis ordens de tarefas ou eventos para an√°lise.</ListItem>
                <ListItem><strong>Testes de Software:</strong> Gerar diferentes ordens de execu√ß√£o de eventos para encontrar bugs.</ListItem>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">A Gera√ß√£o de Permuta√ß√µes √© um pilar do backtracking. A t√©cnica de "escolher, explorar, desfazer" √© um padr√£o poderoso que pode ser aplicado a uma vasta gama de problemas de busca e enumera√ß√£o. A abordagem de troca no local (in-place swap) √© particularmente elegante, pois minimiza o uso de mem√≥ria auxiliar durante a explora√ß√£o da √°rvore de busca.</p>
        </div>
    );
};

export default PermutationGenerationExplanation;