import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const SubsetSumMemoizedExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üß† Soma de Subconjuntos com Memoiza√ß√£o</h2>

            <SectionTitle>üéØ Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">
                Implementa√ß√£o do problema da <strong>Soma de Subconjuntos</strong> usando <strong>memoiza√ß√£o</strong>, demonstrando a transi√ß√£o fundamental de algoritmos de backtracking exponenciais para solu√ß√µes de programa√ß√£o din√¢mica eficientes. Esta √© a quintess√™ncia da filosofia "PD √© recurs√£o inteligente".
            </p>

            <SectionTitle>üß† An√°lise de Especialista</SectionTitle>
            <SubTitle>Filosofia Central</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>"PD √© Recurs√£o Inteligente"</strong>: N√£o √© uma t√©cnica nova, mas otimiza√ß√£o de algoritmos recursivos.</ListItem>
                <ListItem><strong>Transi√ß√£o Suave</strong>: Mant√©m estrutura l√≥gica da recurs√£o original.</ListItem>
                <ListItem><strong>Cache Inteligente</strong>: Adiciona cache para evitar rec√°lculos exponenciais.</ListItem>
            </ul>

            <SubTitle>An√°lise de Complexidade</SubTitle>
            <Table
                headers={["Abordagem", "Complexidade", "Descri√ß√£o"]}
                rows={[
                    ["Backtracking", "O(2^n)", "Explora√ß√£o exponencial de todos os subconjuntos"],
                    ["Memoiza√ß√£o", "O(n¬∑T)", "Pseudo-polinomial, onde T √© o valor alvo"],
                    ["Melhoria", "Exponencial ‚Üí Pseudo-polinomial", "Redu√ß√£o dr√°stica de complexidade"],
                ]}
            />
            
            <SectionTitle>‚öôÔ∏è Estrutura da Implementa√ß√£o</SectionTitle>
            <SubTitle>Fun√ß√£o Principal: `subset_sum_memoization`</SubTitle>
            <CodeBlock>{`def subset_sum_memoization(nums, target):
    memo = {}
    
    def dp(i, t):
        if (i, t) in memo:
            return memo[(i, t)]
        
        if t == 0: return True
        if i >= len(nums) or t < 0: return False
        
        # Recurs√£o com memoiza√ß√£o
        result = dp(i + 1, t - nums[i]) or dp(i + 1, t)
        memo[(i, t)] = result
        return result
    
    return dp(0, target)`}</CodeBlock>

            <SubTitle>Identifica√ß√£o do Estado</SubTitle>
             <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Estado (i, t)</strong>: "Existe um subconjunto de `nums[i..n-1]` que soma `t`?"</ListItem>
                <ListItem><strong>Chave do Cache</strong>: Par `(i, t)` como identificador √∫nico do subproblema.</ListItem>
                <ListItem><strong>Independ√™ncia</strong>: Cada subproblema pode ser resolvido independentemente.</ListItem>
            </ul>

            <SectionTitle>üìä Complexidade e Limita√ß√µes</SectionTitle>
            <SubTitle>An√°lise Detalhada</SubTitle>
             <Table
                headers={["Aspecto", "Complexidade", "Descri√ß√£o"]}
                rows={[
                    ["Tempo", "O(n¬∑T)", "Pseudo-polinomial, onde T √© o valor alvo"],
                    ["Espa√ßo", "O(n¬∑T)", "Cache de memoiza√ß√£o para todos os subproblemas"],
                    ["Vantagem", "Reduz O(2‚Åø) para O(n¬∑T)", "Melhoria exponencial"],
                    ["Limita√ß√£o", "Ainda pode ser lento para T muito grande", "Pseudo-polinomial"],
                ]}
            />
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Problemas de Otimiza√ß√£o</strong>: Aloca√ß√£o de recursos, balanceamento de carga, problemas de parti√ß√£o.</ListItem>
                <ListItem><strong>Teoria da Computa√ß√£o</strong>: Exemplo cl√°ssico de problema NP-completo.</ListItem>
                <ListItem><strong>Problemas Relacionados</strong>: Problema da Mochila (Knapsack), Troco de Moedas (Coin Change).</ListItem>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">A implementa√ß√£o da Soma de Subconjuntos com memoiza√ß√£o demonstra a ess√™ncia da programa√ß√£o din√¢mica:</p>
            <ol className="list-decimal list-inside space-y-2 text-slate-300 mt-2">
                <li><strong>Transi√ß√£o Fundamental</strong>: De O(2‚Åø) para O(n¬∑T) pseudo-polinomial.</li>
                <li><strong>Recurs√£o Inteligente</strong>: PD como otimiza√ß√£o de algoritmos recursivos.</li>
                <li><strong>Identifica√ß√£o de Estado</strong>: Par `(i, t)` como representa√ß√£o √∫nica de subproblemas.</li>
                <li><strong>Cache Eficiente</strong>: Memoiza√ß√£o que elimina rec√°lculos exponenciais.</li>
            </ol>
            <p className="mt-2 text-slate-300">Esta implementa√ß√£o serve como base fundamental para entender a transi√ß√£o de algoritmos de for√ßa bruta para solu√ß√µes eficientes.</p>
        </div>
    );
};

export default SubsetSumMemoizedExplanation;
