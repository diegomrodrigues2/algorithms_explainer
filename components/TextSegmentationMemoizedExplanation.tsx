import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem, Table } from './ExplanationUI';

const TextSegmentationMemoizedExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üß† Segmenta√ß√£o de Texto com Memoiza√ß√£o</h2>

            <SectionTitle>üéØ Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">O problema de <strong>Segmenta√ß√£o de Texto (Word Break)</strong> consiste em determinar se uma string sem espa√ßos pode ser segmentada em uma sequ√™ncia de palavras v√°lidas usando um dicion√°rio. A transi√ß√£o de backtracking exponencial O(2‚Åø) para programa√ß√£o din√¢mica O(n¬≤) demonstra a ess√™ncia da PD.</p>

            <SectionTitle>üîÑ Estrat√©gias de Implementa√ß√£o</SectionTitle>
            <SubTitle>Memoiza√ß√£o (Recursivo Top-Down)</SubTitle>
            <CodeBlock>{`memo = {}
def can_break(s):
    if s in memo: return memo[s]
    if s == "": return []
    
    for i in range(1, len(s) + 1):
        prefix = s[:i]
        if prefix in dictionary:
            suffix_result = can_break(s[i:])
            if suffix_result is not None:
                memo[s] = [prefix] + suffix_result
                return memo[s]
    
    memo[s] = None
    return None`}</CodeBlock>

            <SubTitle>Tabela√ß√£o (Iterativo Bottom-Up)</SubTitle>
            <CodeBlock>{`dp = [False] * (n + 1)
dp[0] = True

for i in range(1, n + 1):
    for j in range(i):
        if dp[j] and text[j:i] in dictionary:
            dp[i] = True
            break`}</CodeBlock>

            <SectionTitle>üß† An√°lise de Subproblemas</SectionTitle>
            <SubTitle>Estado do Subproblema</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Defini√ß√£o</strong>: `dp[i]` = "O sufixo `text[i..n]` pode ser segmentado?"</ListItem>
                <ListItem><strong>Estados poss√≠veis</strong>: `n` (um para cada posi√ß√£o inicial)</ListItem>
                <ListItem><strong>Sobreposi√ß√£o</strong>: M√∫ltiplos caminhos chegam ao mesmo estado, justificando o cache.</ListItem>
            </ul>

            <SubTitle>Estrutura √ìtima</SubTitle>
            <p className="text-slate-300">Se `text[i..j]` √© uma palavra v√°lida e `text[j..n]` pode ser segmentado, ent√£o `text[i..n]` tamb√©m pode. A f√≥rmula √©:</p>
            <CodeBlock>dp[i] = OR(dp[j] AND is_word(text[i..j])) para j > i</CodeBlock>

            <SectionTitle>‚ö° Melhoria de Performance</SectionTitle>
            <Table
                headers={["Abordagem", "Complexidade", "Vantagem"]}
                rows={[
                    ["Backtracking", "O(2‚Åø)", "Simples de conceber"],
                    ["Memoiza√ß√£o (DP)", "O(n¬≤)", "Evita rec√°lculos exponenciais"],
                ]}
            />
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
             <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Processamento de Linguagem</strong>: Essencial para idiomas sem espa√ßos como chin√™s, japon√™s e tailand√™s.</ListItem>
                <ListItem><strong>Corre√ß√£o Autom√°tica</strong>: Sugerir corre√ß√µes para palavras concatenadas (ex: "showdebola" ‚Üí "show de bola").</ListItem>
                <ListItem><strong>An√°lise de URL</strong>: Extrair palavras-chave de slugs (ex: `/artigo/como-usar-backtracking`).</ListItem>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">A Segmenta√ß√£o de Texto √© um exemplo fant√°stico que demonstra a necessidade de otimiza√ß√£o em algoritmos recursivos. Enquanto o backtracking fornece uma estrutura l√≥gica, a adi√ß√£o da memoiza√ß√£o o transforma em uma ferramenta pr√°tica e eficiente.</p>
        </div>
    );
};

export default TextSegmentationMemoizedExplanation;