import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, Table } from './ExplanationUI';

const NQueensExplanation = () => {
    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üëë N-Rainhas</h2>
            
            <SectionTitle>üéØ Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">O problema das N-Rainhas √© o <strong>exemplo protot√≠pico</strong> para ensinar backtracking. Consiste em posicionar N rainhas de xadrez em um tabuleiro N√óN de forma que nenhuma rainha ameace outra. Uma rainha pode atacar na horizontal, vertical e diagonal.</p>
            <p className="text-slate-300 mt-2">Este problema ilustra perfeitamente os conceitos fundamentais de backtracking: <strong>explora√ß√£o sistem√°tica</strong>, <strong>poda inteligente</strong> e <strong>constru√ß√£o incremental</strong> de solu√ß√µes.</p>

            <SectionTitle>üìä An√°lise do Problema</SectionTitle>
            <SubTitle>Regras do Xadrez</SubTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Rainha</strong>: Pode mover qualquer n√∫mero de casas na horizontal, vertical ou diagonal.</li>
                <li><strong>Amea√ßa</strong>: Duas rainhas se amea√ßam se est√£o na mesma linha, coluna ou diagonal.</li>
                <li><strong>Objetivo</strong>: Posicionar N rainhas sem conflitos.</li>
            </ul>

            <SectionTitle>üîÑ Algoritmo de Backtracking</SectionTitle>
            <SubTitle>Estrat√©gia Fundamental</SubTitle>
            <p className="text-slate-300">O algoritmo funciona <strong>linha por linha</strong>, tentando colocar uma rainha em uma coluna v√°lida. Se n√£o houver colunas v√°lidas, ele "retrocede" (backtracks) para a linha anterior e tenta uma coluna diferente.</p>
            <CodeBlock>{`def solve_n_queens_backtracking(n):
    def backtrack(row):
        # Caso base: todas as rainhas foram colocadas
        if row == n:
            solutions.append(board[:])
            return
        
        # Tentar colocar rainha em cada coluna da linha atual
        for col in range(n):
            if is_safe(board, row, col):
                board[row] = col  # Colocar rainha
                backtrack(row + 1)  # Recurs√£o para pr√≥xima linha
                # Backtrack √© impl√≠cito ao sair do loop e voltar
    
    board = [-1] * n
    solutions = []
    backtrack(0)
    return solutions`}</CodeBlock>
            
            <SubTitle>Fun√ß√£o de Verifica√ß√£o de Seguran√ßa</SubTitle>
            <p className="text-slate-300">Para cada nova posi√ß√£o, verificamos se ela est√° sob ataque das rainhas j√° colocadas nas linhas anteriores.</p>
            <CodeBlock>{`def is_safe(board, row, col):
    # Verificar colunas anteriores
    for i in range(row):
        if board[i] == col:
            return False
    
    # Verificar diagonal principal (esquerda superior)
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i] == j:
            return False
    
    # Verificar diagonal secund√°ria (direita superior)
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i] == j:
            return False
    
    return True`}</CodeBlock>

            <SectionTitle>‚ö° Otimiza√ß√µes</SectionTitle>
            <p className="text-slate-300">A verifica√ß√£o `is_safe` pode ser otimizada de O(n) para O(1) usando arrays auxiliares para rastrear colunas e diagonais ocupadas, melhorando drasticamente a performance.</p>

            <SectionTitle>üìà An√°lise de Complexidade</SectionTitle>
            <p className="text-slate-300">A complexidade do problema √© aproximadamente <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(N!)</code>. Embora seja um crescimento fatorial, o backtracking (poda) √© muito mais eficiente do que uma busca de for√ßa bruta, que seria <code className="text-amber-400 bg-slate-700/50 px-2 py-1 rounded">O(N^N)</code>.</p>

            <SubTitle>N√∫mero de Solu√ß√µes</SubTitle>
             <Table
                headers={["N", "Solu√ß√µes √önicas", "Todas as Solu√ß√µes"]}
                rows={[
                    ["4", "1", "2"],
                    ["5", "2", "10"],
                    ["6", "1", "4"],
                    ["7", "6", "40"],
                    ["8", "12", "92"],
                    ["9", "46", "352"],
                    ["10", "92", "724"],
                ]}
            />
            
            <SectionTitle>üéØ Aplica√ß√µes Pr√°ticas</SectionTitle>
            <p className="text-slate-300">O backtracking √© uma t√©cnica poderosa usada em:</p>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <li><strong>Solucionadores de Puzzles</strong>: Sudoku, palavras-cruzadas.</li>
                <li><strong>Planejamento e Agendamento</strong>: Aloca√ß√£o de recursos sem conflitos.</li>
                <li><strong>Design de Circuitos</strong>: Posicionamento de componentes em VLSI.</li>
                <li><strong>Intelig√™ncia Artificial</strong>: Problemas de satisfa√ß√£o de restri√ß√µes (CSP).</li>
            </ul>

            <SectionTitle>üí° Conclus√£o</SectionTitle>
            <p className="text-slate-300">O problema das N-Rainhas √© uma excelente introdu√ß√£o ao poder do backtracking. Ele ensina a construir solu√ß√µes passo a passo e a abandonar caminhos que n√£o levar√£o a uma solu√ß√£o, podando a √°rvore de busca de forma eficiente. √â um pilar fundamental para a resolu√ß√£o de problemas combinat√≥rios complexos.</p>
        </div>
    );
};

export default NQueensExplanation;