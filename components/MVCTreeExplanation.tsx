import React from 'react';
import { CodeBlock, SectionTitle, SubTitle, ListItem } from './ExplanationUI';

const MVCTreeExplanation = () => {
    const pythonGeneral = `from typing import List

def mvc_tree(n: int, adj: List[List[int]], root: int = 0) -> int:
    import sys
    sys.setrecursionlimit(10**6)

    take = [0] * n
    skip = [0] * n

    def dfs(u: int, parent: int) -> None:
        take_u = 1
        skip_u = 0
        for v in adj[u]:
            if v == parent:
                continue
            dfs(v, u)
            take_u += min(take[v], skip[v])
            skip_u += take[v]
        take[u] = take_u
        skip[u] = skip_u

    dfs(root, -1)
    return min(take[root], skip[root])`;
    
    const pythonBinary = `class Node:
    def __init__(self, val: int, left: 'Node' = None, right: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right

def mvc_binary_tree(root: Node) -> int:
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def dp(node: Node, take_here: bool) -> int:
        if node is None:
            return 0
        if take_here:
            return 1 + min(dp(node.left, True), dp(node.left, False)) \\
                     + min(dp(node.right, True), dp(node.right, False))
        else:
            return dp(node.left, True) + dp(node.right, True)

    return min(dp(root, True), dp(root, False))`;

    return (
        <div className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 max-h-[85vh] overflow-y-auto">
            <h2 className="text-3xl font-bold text-center mb-6 text-slate-100">üß© Cobertura de V√©rtices M√≠nima (MVC) em √Årvores</h2>

            <SectionTitle>üéØ Vis√£o Geral</SectionTitle>
            <p className="text-slate-300">
                Uma <strong>cobertura de v√©rtices</strong> √© um conjunto de n√≥s que "toca" (√© incidente a) todas as arestas de um grafo. O objetivo √© encontrar a cobertura de menor tamanho. Em √°rvores, a solu√ß√£o √≥tima pode ser obtida em O(n) via PD em p√≥s-ordem, an√°loga ao MIS.
            </p>

            <SectionTitle>üß† Formula√ß√£o de PD em √Årvores</SectionTitle>
            <SubTitle>Estado por N√≥ `u`</SubTitle>
            <ul className="list-disc list-inside space-y-3 text-slate-300">
                <ListItem>
                    <strong>`take[u]` (Incluir `u` na cobertura)</strong>: Se `u` est√° na cobertura, todas as arestas incidentes a `u` est√£o cobertas. Para as sub√°rvores de seus filhos `v`, podemos escolher a op√ß√£o de menor custo (incluir `v` ou n√£o).
                    <CodeBlock>take[u] = 1 + Œ£ min(take[v], skip[v])</CodeBlock>
                </ListItem>
                 <ListItem>
                    <strong>`skip[u]` (Excluir `u` da cobertura)</strong>: Se `u` n√£o est√° na cobertura, ent√£o, para cobrir a aresta `(u,v)`, cada filho `v` **deve** ser inclu√≠do na cobertura.
                    <CodeBlock>skip[u] = Œ£ take[v]</CodeBlock>
                </ListItem>
                <ListItem>
                    <strong>Resposta Final</strong>: O tamanho da MVC para a √°rvore √© o m√≠nimo entre incluir ou excluir a raiz.
                     <CodeBlock>min(take[root], skip[root])</CodeBlock>
                </ListItem>
            </ul>
            <p className="text-slate-300 mt-2"><strong>Complexidade:</strong> O(n) em tempo e espa√ßo.</p>
            
            <SectionTitle>üîß Implementa√ß√£o Essencial (√Årvore Geral)</SectionTitle>
            <CodeBlock>{pythonGeneral}</CodeBlock>
            
            <SectionTitle>üåø Implementa√ß√£o para √Årvore Bin√°ria</SectionTitle>
            <CodeBlock>{pythonBinary}</CodeBlock>

            <SectionTitle>üîó Rela√ß√µes Te√≥ricas</SectionTitle>
            <ul className="list-disc list-inside space-y-2 text-slate-300">
                <ListItem><strong>Teorema de K√∂nig (bipartidos)</strong>: Em grafos bipartidos (como √°rvores), o tamanho da MVC √© igual ao tamanho do Emparelhamento M√°ximo (`|MVC| = |Matching M√°ximo|`).</ListItem>
                <ListItem><strong>Dualidade com MIS</strong>: Para qualquer grafo (e especialmente para √°rvores), o tamanho da MVC mais o tamanho do MIS √© igual ao n√∫mero total de v√©rtices (`|MVC| + |MIS| = |V|`).</ListItem>
            </ul>
        </div>
    );
};

export default MVCTreeExplanation;
